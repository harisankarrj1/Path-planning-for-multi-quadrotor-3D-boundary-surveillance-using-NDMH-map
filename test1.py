

from math import cos, sin
import numpy as np
from Quadrotor import Quadrotor
from TrajectoryGenerator import TrajectoryGenerator
import matplotlib.pyplot as plt

# Simulation parameters
g = 9.81  # gravitational acceleration (m/s^2)
m = 0.2  # mass of the quadrotor (kg)
Ixx = 1  # moment of inertia about the x-axis
Iyy = 1  # moment of inertia about the y-axis
Izz = 1  # moment of inertia about the z-axis
T = 15  # duration of each trajectory segment (s)

# Proportional coefficients
Kp_x = 1  # proportional gain for x-axis
Kp_y = 1  # proportional gain for y-axis
Kp_z = 1  # proportional gain for z-axis
Kp_roll = 25  # proportional gain for roll
Kp_pitch = 25  # proportional gain for pitch
Kp_yaw = 25  # proportional gain for yaw

# Derivative coefficients
Kd_x = 10  # derivative gain for x-axis
Kd_y = 10  # derivative gain for y-axis
Kd_z = 1  # derivative gain for z-axis

# Circular trajectory parameters
r = 2  # radius of the circle
omega = 2 * np.pi / T  # angular velocity
h = 3  # constant height

# Animation flag
show_animation = True


def quad_sim(r, omega, h, T):
    x_pos = r
    y_pos = 0
    z_pos = h
    x_vel = 0
    y_vel = 0
    z_vel = 0
    x_acc = 0
    y_acc = 0
    z_acc = 0
    roll = 0
    pitch = 0
    yaw = 0
    roll_vel = 0
    pitch_vel = 0
    yaw_vel = 0

    des_yaw = 0

    dt = 0.1

    quad = Quadrotor(x_pos, y_pos, z_pos, roll, pitch, yaw, show_animation=show_animation)

    time = 0.0
    while time <= T:
        des_x_pos = r * cos(omega * time)
        des_y_pos = r * sin(omega * time)
        des_z_pos = h

        des_x_vel = -r * omega * sin(omega * time)
        des_y_vel = r * omega * cos(omega * time)
        des_z_vel = 0

        des_x_acc = -r * omega**2 * cos(omega * time)
        des_y_acc = -r * omega**2 * sin(omega * time)
        des_z_acc = 0

        x_acc = Kp_x * (des_x_pos - x_pos) + Kd_x * (des_x_vel - x_vel)
        y_acc = Kp_y * (des_y_pos - y_pos) + Kd_y * (des_y_vel - y_vel)
        z_acc = Kp_z * (des_z_pos - z_pos) + Kd_z * (des_z_vel - z_vel)

        x_vel += x_acc * dt
        y_vel += y_acc * dt
        z_vel += z_acc * dt

        x_pos += x_vel * dt + (0.5 * x_acc * dt**2)
        y_pos += y_vel * dt + (0.5 * y_acc * dt**2)
        z_pos += z_vel * dt + (0.5 * z_acc * dt**2)

        pitch = cos(yaw) * (x_acc + g * sin(pitch)) - sin(yaw) * (y_acc + g * sin(roll)) / g
        roll = sin(yaw) * (x_acc + g * sin(pitch)) + cos(yaw) * (y_acc + g * sin(roll)) / g

        pitch_vel = Kp_pitch * (pitch - pitch_vel)
        roll_vel = Kp_roll * (roll - roll_vel)
        yaw_vel = Kp_yaw * (des_yaw - yaw_vel)

        yaw += yaw_vel * dt

        quad.update_pose(x_pos, y_pos, z_pos, roll, pitch, yaw)

        time += dt

    return [quad.x_data, quad.y_data, quad.z_data]


def calculate_position(c, t):
    """
    Calculates a position given a set of quintic coefficients and a time.

    Args
        c: List of coefficients generated by a quintic polynomial
            trajectory generator.
        t: Time at which to calculate the position

    Returns
        Position
    """
    return c[0] * t**5 + c[1] * t**4 + c[2] * t**3 + c[3] * t**2 + c[4] * t + c[5]


def calculate_velocity(c, t):
    """
    Calculates a velocity given a set of quintic coefficients and a time.

    Args
        c: List of coefficients generated by a quintic polynomial
            trajectory generator.
        t: Time at which to calculate the velocity

    Returns
        Velocity
    """
    return 5 * c[0] * t**4 + 4 * c[1] * t**3 + 3 * c[2] * t**2 + 2 * c[3] * t + c[4]


def calculate_acceleration(c, t):
    """
    Calculates an acceleration given a set of quintic coefficients and a time.

    Args
        c: List of coefficients generated by a quintic polynomial
            trajectory generator.
        t: Time at which to calculate the acceleration

    Returns
        Acceleration
    """
    return 20 * c[0] * t**3 + 12 * c[1] * t**2 + 6 * c[2] * t + 2 * c[3]


def rotation_matrix(roll_array, pitch_array, yaw):
    """
    Calculates the ZYX rotation matrix.

    Args
        Roll: Angular position about the x-axis in radians.
        Pitch: Angular position about the y-axis in radians.
        Yaw: Angular position about the z-axis in radians.

    Returns
        3x3 rotation matrix as NumPy array
    """
    roll = roll_array[0]
    pitch = pitch_array[0]
    return np.array(
        [[cos(yaw) * cos(pitch), -sin(yaw) * cos(roll) + cos(yaw) * sin(pitch) * sin(roll), sin(yaw) * sin(roll) + cos(yaw) * sin(pitch) * cos(roll)],
         [sin(yaw) * cos(pitch), cos(yaw) * cos(roll) + sin(yaw) * sin(pitch) *
          sin(roll), -cos(yaw) * sin(roll) + sin(yaw) * sin(pitch) * cos(roll)],
         [-sin(pitch), cos(pitch) * sin(roll), cos(pitch) * cos(yaw)]
         ])


if __name__ == '__main__':
    [x_data, y_data, z_data] = quad_sim(r, omega, h, T)

    if show_animation:
        plt.plot(x_data, y_data, z_data, 'b')
        plt.grid(True)
        plt.show()


